pub mod board;
pub mod constants;
pub mod gem;
pub mod gem_color;
pub mod gem_combination;
pub mod utilities;

#[cfg(test)]
mod tests {
    use crate::utilities::board_from_string;

    #[test]
    fn should_find_no_combinations() {
        let board_str = r#"
            游릱游릳游릱游릴游릳游린游릵游릳
            游릱游릳游릱游릳游릵游린游릵游릴
            游릴游릱游린游린游릳游릳游릱游릳
            游릵游릳游릱游릵游릴游릳游릳游릵
            游릱游릱游릴游릱游릴游린游릵游린
            游린游린游릴游릴游릱游릱游릵游릳
            游릵游릴游릵游릴游릵游릱游릳游릵
            游린游릱游릴游릵游릳游릳游릱游린
        "#;
        let board = board_from_string(board_str);
        assert!(board.find_combinations().is_empty())
    }

    #[test]
    fn should_find_four_combinations() {
        let board_str = r#"
            游릳游린游릵游린游릳游릴游릴游릳
            游릳游릵游린游릴游릱游린游릱游린
            游린游린游릴游릵游릱游릳游릴游릵
            游린游릱游릱游릱游릳游릴游릴游릱
            游릴游릴游릴游릴游린游린游린游릳
            游릴游린游릴游릱游릴游릴游릳游릳
            游릱游릱游릳游릳游릱游릳游릳游릱
            游릱游릱游린游릱游릵游릴游릳游릳
        "#;
        let board = board_from_string(board_str);
        assert_eq!(4, board.find_combinations().len())
    }

    #[test]
    fn should_find_zero_combinations_and_no_possible_combinations() {
        let board_str = r#"
            游릳游릱游릳游릱游릳游릱游릳游릱
            游릳游릱游릳游릱游릳游릱游릳游릱
            游릴游린游릴游린游릴游린游릴游린
            游릴游린游릴游린游릴游린游릴游린
            游릵游릱游릵游릱游릵游릱游릵游릱
            游릵游릱游릵游릱游릵游릱游릵游릱
            游릳游릴游릳游릴游릳游릴游릳游릴
            游릳游릴游릳游릴游릳游릴游릳游릴
        "#;
        let board = board_from_string(board_str);
        assert!(board.find_combinations().is_empty());
        assert!(!board.contains_possible_combinations());
    }

    #[test]
    fn should_find_zero_combinations_and_possible_combinations_v1() {
        let board_str = r#"
            游릳游릱游릳游릱游릳游릱游릳游릱
            游릳游릱游릳游릱游릳游릱游릳游릱
            游릴游린游릴游린游릴游린游릴游린
            游릴游린游릴游린游릴游린游릴游린
            游릵游릱游릵游릴游릵游릱游릵游릱
            游릵游릱游릵游릱游릵游릱游릵游릱
            游릳游릴游릳游릴游릳游릴游릳游릴
            游릳游릴游릳游릴游릳游릴游릳游릴
        "#;
        let board = board_from_string(board_str);
        assert!(board.find_combinations().is_empty());
        assert!(board.contains_possible_combinations());
    }

    #[test]
    fn should_find_zero_combinations_and_possible_combinations_v2() {
        let board_str = r#"
            游릳游릱游릴游릱游릳游릱游릳游릱
            游릳游릱游릳游릱游릳游릱游릳游릱
            游릴游린游릴游린游릴游린游릴游린
            游릴游린游릴游린游릴游린游릴游린
            游릵游릱游릵游릱游릵游릱游릵游릱
            游릵游릱游릵游릱游릵游릱游릵游릱
            游릳游릴游릳游릴游릳游릴游릳游릴
            游릳游릴游릳游릴游릳游릴游릳游릴
        "#;
        let board = board_from_string(board_str);
        assert!(board.find_combinations().is_empty());
        assert!(board.contains_possible_combinations());
    }

    #[test]
    fn should_find_zero_combinations_and_possible_combinations_v3() {
        let board_str = r#"
            游릳游릱游릵游릱游릳游릱游릳游릱
            游릳游릱游릵游릱游릳游릱游릳游릱
            游릴游릳游릴游린游릴游린游릴游린
            游릴游린游릴游린游릴游린游릴游린
            游릵游릱游릵游릱游릵游릱游릵游릱
            游릵游릱游릵游릱游릵游릱游릵游릱
            游릳游릴游릳游릴游릳游릴游릳游릴
            游릳游릴游릳游릴游릳游릴游릳游릴
        "#;
        let board = board_from_string(board_str);
        assert!(board.find_combinations().is_empty());
        assert!(board.contains_possible_combinations());
    }

    #[test]
    fn should_find_zero_combinations_and_possible_combinations_v4() {
        let board_str = r#"
            游릳游릱游릳游릱游릳游릱游릳游릱
            游릳游릱游릳游릱游릳游릱游릳游릱
            游릴游린游릴游린游릴游린游릴游린
            游릴游린游릴游린游릴游린游릴游린
            游릵游릱游릵游릱游릵游릱游릵游릱
            游릵游릳游릵游릱游릵游릱游릵游릱
            游릳游릴游린游릴游릳游릴游릳游릴
            游릳游릴游린游릴游릳游릴游릳游릴
        "#;
        let board = board_from_string(board_str);
        assert!(board.find_combinations().is_empty());
        assert!(board.contains_possible_combinations());
    }

    #[test]
    fn should_find_zero_combinations_and_possible_combinations_v5() {
        let board_str = r#"
            游릳游릱游릳游릱游릳游릱游릳游릱
            游릳游릱游릳游릱游릳游릱游릳游릱
            游릴游린游릴游린游릴游린游릴游린
            游릴游린游릴游린游릴游린游릴游린
            游릵游릱游릵游릱游릵游릱游릵游릱
            游릵游릱游릵游릴游릵游릱游릵游릱
            游릳游린游릴游릳游릳游릴游린游릴
            游릳游린游린游릴游릳游릴游릳游릴
        "#;
        let board = board_from_string(board_str);
        assert!(board.find_combinations().is_empty());
        assert!(board.contains_possible_combinations());
    }

    #[test]
    fn should_find_zero_combinations_and_possible_combinations_v6() {
        let board_str = r#"
            游릳游릱游릳游릱游릳游릱游릳游릱
            游릳游릱游릳游릱游릳游릱游릳游릱
            游릴游린游릴游린游릴游린游릴游린
            游릴游린游릴游린游릴游린游릴游린
            游릵游릱游릵游릳游릱游릳游릵游릱
            游릵游릱游릵游릱游릵游릱游릵游릱
            游릳游린游린游릴游릳游릴游린游릴
            游릳游린游린游릴游릳游릴游릳游릴
        "#;
        let board = board_from_string(board_str);
        assert!(board.find_combinations().is_empty());
        assert!(board.contains_possible_combinations());
    }
}
